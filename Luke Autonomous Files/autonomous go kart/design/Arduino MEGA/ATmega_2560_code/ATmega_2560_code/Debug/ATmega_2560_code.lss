
ATmega_2560_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000406  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000392  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800200  00800200  00000406  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000406  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d27  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ba0  00000000  00000000  000011cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000400  00000000  00000000  00001d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00002170  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000628  00000000  00000000  000021e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000009f  00000000  00000000  0000280c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000028ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	ff c0       	rjmp	.+510    	; 0x274 <__vector_29>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	30 c1       	rjmp	.+608    	; 0x2de <__vector_31>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	ae 30       	cpi	r26, 0x0E	; 14
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	02 d0       	rcall	.+4      	; 0x10a <main>
 106:	43 c1       	rjmp	.+646    	; 0x38e <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <main>:

//main function
int main(void)
{
	//general setup
	DDRD = 0b00001000;
 10a:	88 e0       	ldi	r24, 0x08	; 8
 10c:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00000000;
 10e:	1b b8       	out	0x0b, r1	; 11
	DDRE = 0b00111000;
 110:	88 e3       	ldi	r24, 0x38	; 56
 112:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0b00000000;
 114:	1e b8       	out	0x0e, r1	; 14
	DDRF = 0b00000000;
 116:	10 ba       	out	0x10, r1	; 16
	PORTF = 0b00000000;
 118:	11 ba       	out	0x11, r1	; 17
	DDRL = 0b00000000;
 11a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
	PORTL = 0b00000000;
 11e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
	
	sei();	//enable global interrupts
 122:	78 94       	sei
	*	ADIF	= interrupt flag false (not applicable)		*
	*	ADIE	= interrupt enabled							*
	*	ADPS	= prescaler = 128							*
	*														*
	********************************************************/
	ADMUX = 0b01100000;
 124:	80 e6       	ldi	r24, 0x60	; 96
 126:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA = 0b11001111;
 12a:	8f ec       	ldi	r24, 0xCF	; 207
 12c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	*	ICNC3	= noise canceler off								*
	*	ICES3	= ICP3 negative edge trigger (not applicable)		*
	*	CS3		= prescaler = 8										*
	*																*
	****************************************************************/
	TCCR3A = 0b10101010;
 130:	8a ea       	ldi	r24, 0xAA	; 170
 132:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
	TCCR3B = 0b00011010;
 136:	8a e1       	ldi	r24, 0x1A	; 26
 138:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	ICR3 = 40000;
 13c:	20 e4       	ldi	r18, 0x40	; 64
 13e:	3c e9       	ldi	r19, 0x9C	; 156
 140:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 144:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
	*	OCIE4B	= output compare B interrupt enable off	*
	*	OCIE4A	= output compare A interrupt enable off	*
	*	TOV4	= overflow interrupt enable off			*
	*													*
	****************************************************/
	TCCR4A = 0b00000011;
 148:	93 e0       	ldi	r25, 0x03	; 3
 14a:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
	TCCR4B = 0b00011010;
 14e:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
	TIMSK4 = 0b00100000;
 152:	80 e2       	ldi	r24, 0x20	; 32
 154:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
	OCR4A = 0xFFFF;
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	9f ef       	ldi	r25, 0xFF	; 255
 15c:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 160:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
	//loop
    while (1)
    {
		//throttle (not yet done)
		//some comparison between rpm sensor and desired acceleration, which should really be desired speed
		velocity = (56000 / drive_sensor_in);	//measured in m/s
 164:	0f 2e       	mov	r0, r31
 166:	f0 ec       	ldi	r31, 0xC0	; 192
 168:	8f 2e       	mov	r8, r31
 16a:	fa ed       	ldi	r31, 0xDA	; 218
 16c:	9f 2e       	mov	r9, r31
 16e:	a1 2c       	mov	r10, r1
 170:	b1 2c       	mov	r11, r1
 172:	f0 2d       	mov	r31, r0
		OCR3C = drive_control_out;
 174:	0f 2e       	mov	r0, r31
 176:	fc e9       	ldi	r31, 0x9C	; 156
 178:	cf 2e       	mov	r12, r31
 17a:	d1 2c       	mov	r13, r1
 17c:	f0 2d       	mov	r31, r0
		
		//steering
		if (desired_steering_in < STEERING_MARGIN)																		//limit desired_steering_in to range
			desired_steering_in = STEERING_MARGIN;																		//
		if (desired_steering_in > (255 - STEERING_MARGIN))																//
			desired_steering_in = (255 - STEERING_MARGIN);																//
 17e:	0f 2e       	mov	r0, r31
 180:	ff ea       	ldi	r31, 0xAF	; 175
 182:	7f 2e       	mov	r7, r31
 184:	f0 2d       	mov	r31, r0
		velocity = (56000 / drive_sensor_in);	//measured in m/s
		OCR3C = drive_control_out;
		
		//steering
		if (desired_steering_in < STEERING_MARGIN)																		//limit desired_steering_in to range
			desired_steering_in = STEERING_MARGIN;																		//
 186:	0f 2e       	mov	r0, r31
 188:	f0 e5       	ldi	r31, 0x50	; 80
 18a:	6f 2e       	mov	r6, r31
 18c:	f0 2d       	mov	r31, r0
			desired_steering_in = (255 - STEERING_MARGIN);																//
		steering_control_out = ((PWM_CENTER * 2) - (STEERING_AGGRESSION * (desired_steering_in - steering_sensor_in)));	//perform percent control to target value
		if (steering_control_out > (PWM_MAX * 2))																		//limit steering_control_out to range
			steering_control_out = (PWM_MAX * 2);																		//
		if (steering_control_out < (PWM_MIN * 2))																		//
			steering_control_out = (PWM_MIN * 2);																		//
 18e:	0f 2e       	mov	r0, r31
 190:	f0 ed       	ldi	r31, 0xD0	; 208
 192:	ef 2e       	mov	r14, r31
 194:	f7 e0       	ldi	r31, 0x07	; 7
 196:	ff 2e       	mov	r15, r31
 198:	f0 2d       	mov	r31, r0
			desired_steering_in = STEERING_MARGIN;																		//
		if (desired_steering_in > (255 - STEERING_MARGIN))																//
			desired_steering_in = (255 - STEERING_MARGIN);																//
		steering_control_out = ((PWM_CENTER * 2) - (STEERING_AGGRESSION * (desired_steering_in - steering_sensor_in)));	//perform percent control to target value
		if (steering_control_out > (PWM_MAX * 2))																		//limit steering_control_out to range
			steering_control_out = (PWM_MAX * 2);																		//
 19a:	0f 2e       	mov	r0, r31
 19c:	f0 ea       	ldi	r31, 0xA0	; 160
 19e:	4f 2e       	mov	r4, r31
 1a0:	ff e0       	ldi	r31, 0x0F	; 15
 1a2:	5f 2e       	mov	r5, r31
 1a4:	f0 2d       	mov	r31, r0
		if (steering_control_out < (PWM_MIN * 2))																		//
			steering_control_out = (PWM_MIN * 2);																		//
		OCR3B = steering_control_out;																					//send value to OCR3B
 1a6:	0a e9       	ldi	r16, 0x9A	; 154
 1a8:	10 e0       	ldi	r17, 0x00	; 0
		
		//brake (not yet done)
		if (desired_acceleration_in == 0)	//if desired acceleration is 0
			brake_control_out = 2000;			//fully extend brake actuator
		else								//else
			brake_control_out = 1000;			//fully retract brake actuator
 1aa:	0f 2e       	mov	r0, r31
 1ac:	f8 ee       	ldi	r31, 0xE8	; 232
 1ae:	2f 2e       	mov	r2, r31
 1b0:	f3 e0       	ldi	r31, 0x03	; 3
 1b2:	3f 2e       	mov	r3, r31
 1b4:	f0 2d       	mov	r31, r0
		OCR3A = brake_control_out;			//send to OCR3A
 1b6:	c8 e9       	ldi	r28, 0x98	; 152
 1b8:	d0 e0       	ldi	r29, 0x00	; 0
	//loop
    while (1)
    {
		//throttle (not yet done)
		//some comparison between rpm sensor and desired acceleration, which should really be desired speed
		velocity = (56000 / drive_sensor_in);	//measured in m/s
 1ba:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <drive_sensor_in>
 1be:	30 91 04 02 	lds	r19, 0x0204	; 0x800204 <drive_sensor_in+0x1>
 1c2:	40 e0       	ldi	r20, 0x00	; 0
 1c4:	50 e0       	ldi	r21, 0x00	; 0
 1c6:	c5 01       	movw	r24, r10
 1c8:	b4 01       	movw	r22, r8
 1ca:	a3 d0       	rcall	.+326    	; 0x312 <__divmodsi4>
 1cc:	30 93 09 02 	sts	0x0209, r19	; 0x800209 <velocity+0x1>
 1d0:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <velocity>
		OCR3C = drive_control_out;
 1d4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1d8:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1dc:	f6 01       	movw	r30, r12
 1de:	91 83       	std	Z+1, r25	; 0x01
 1e0:	80 83       	st	Z, r24
		
		//steering
		if (desired_steering_in < STEERING_MARGIN)																		//limit desired_steering_in to range
 1e2:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <desired_steering_in>
 1e6:	80 35       	cpi	r24, 0x50	; 80
 1e8:	18 f4       	brcc	.+6      	; 0x1f0 <main+0xe6>
			desired_steering_in = STEERING_MARGIN;																		//
 1ea:	60 92 0a 02 	sts	0x020A, r6	; 0x80020a <desired_steering_in>
 1ee:	04 c0       	rjmp	.+8      	; 0x1f8 <main+0xee>
		if (desired_steering_in > (255 - STEERING_MARGIN))																//
 1f0:	80 3b       	cpi	r24, 0xB0	; 176
 1f2:	10 f0       	brcs	.+4      	; 0x1f8 <main+0xee>
			desired_steering_in = (255 - STEERING_MARGIN);																//
 1f4:	70 92 0a 02 	sts	0x020A, r7	; 0x80020a <desired_steering_in>
		steering_control_out = ((PWM_CENTER * 2) - (STEERING_AGGRESSION * (desired_steering_in - steering_sensor_in)));	//perform percent control to target value
 1f8:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <steering_sensor_in>
 1fc:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <desired_steering_in>
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	28 1b       	sub	r18, r24
 204:	31 09       	sbc	r19, r1
 206:	46 ef       	ldi	r20, 0xF6	; 246
 208:	42 03       	mulsu	r20, r18
 20a:	c0 01       	movw	r24, r0
 20c:	43 9f       	mul	r20, r19
 20e:	90 0d       	add	r25, r0
 210:	11 24       	eor	r1, r1
 212:	88 54       	subi	r24, 0x48	; 72
 214:	94 4f       	sbci	r25, 0xF4	; 244
 216:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <steering_control_out+0x1>
 21a:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <steering_control_out>
		if (steering_control_out > (PWM_MAX * 2))																		//limit steering_control_out to range
 21e:	81 3a       	cpi	r24, 0xA1	; 161
 220:	ef e0       	ldi	r30, 0x0F	; 15
 222:	9e 07       	cpc	r25, r30
 224:	28 f0       	brcs	.+10     	; 0x230 <main+0x126>
			steering_control_out = (PWM_MAX * 2);																		//
 226:	50 92 0c 02 	sts	0x020C, r5	; 0x80020c <steering_control_out+0x1>
 22a:	40 92 0b 02 	sts	0x020B, r4	; 0x80020b <steering_control_out>
 22e:	07 c0       	rjmp	.+14     	; 0x23e <main+0x134>
		if (steering_control_out < (PWM_MIN * 2))																		//
 230:	80 3d       	cpi	r24, 0xD0	; 208
 232:	97 40       	sbci	r25, 0x07	; 7
 234:	20 f4       	brcc	.+8      	; 0x23e <main+0x134>
			steering_control_out = (PWM_MIN * 2);																		//
 236:	f0 92 0c 02 	sts	0x020C, r15	; 0x80020c <steering_control_out+0x1>
 23a:	e0 92 0b 02 	sts	0x020B, r14	; 0x80020b <steering_control_out>
		OCR3B = steering_control_out;																					//send value to OCR3B
 23e:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <steering_control_out>
 242:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <steering_control_out+0x1>
 246:	f8 01       	movw	r30, r16
 248:	91 83       	std	Z+1, r25	; 0x01
 24a:	80 83       	st	Z, r24
		
		//brake (not yet done)
		if (desired_acceleration_in == 0)	//if desired acceleration is 0
 24c:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <desired_acceleration_in>
 250:	81 11       	cpse	r24, r1
 252:	05 c0       	rjmp	.+10     	; 0x25e <main+0x154>
			brake_control_out = 2000;			//fully extend brake actuator
 254:	f0 92 07 02 	sts	0x0207, r15	; 0x800207 <brake_control_out+0x1>
 258:	e0 92 06 02 	sts	0x0206, r14	; 0x800206 <brake_control_out>
 25c:	04 c0       	rjmp	.+8      	; 0x266 <main+0x15c>
		else								//else
			brake_control_out = 1000;			//fully retract brake actuator
 25e:	30 92 07 02 	sts	0x0207, r3	; 0x800207 <brake_control_out+0x1>
 262:	20 92 06 02 	sts	0x0206, r2	; 0x800206 <brake_control_out>
		OCR3A = brake_control_out;			//send to OCR3A
 266:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <brake_control_out>
 26a:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <brake_control_out+0x1>
 26e:	99 83       	std	Y+1, r25	; 0x01
 270:	88 83       	st	Y, r24
    }
 272:	a3 cf       	rjmp	.-186    	; 0x1ba <main+0xb0>

00000274 <__vector_29>:
}

//ADC complete ISR (runs when ADIF in ADCSRA is set)
ISR (ADC_vect)
{
 274:	1f 92       	push	r1
 276:	0f 92       	push	r0
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	0f 92       	push	r0
 27c:	11 24       	eor	r1, r1
 27e:	0b b6       	in	r0, 0x3b	; 59
 280:	0f 92       	push	r0
 282:	8f 93       	push	r24
 284:	ef 93       	push	r30
 286:	ff 93       	push	r31
	if ((ADMUX & 0b00000001) == 0)	//if channel 0 is selected
 288:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
 28c:	80 fd       	sbrc	r24, 0
 28e:	0f c0       	rjmp	.+30     	; 0x2ae <__vector_29+0x3a>
	{
		steering_sensor_in = ADCH;		//store result in steering_sensor_in
 290:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 294:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <steering_sensor_in>
		ADMUX |= 0b00000001;			//select channel 1
 298:	ec e7       	ldi	r30, 0x7C	; 124
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	81 60       	ori	r24, 0x01	; 1
 2a0:	80 83       	st	Z, r24
		ADCSRA |= 0b01000000;			//start conversion
 2a2:	ea e7       	ldi	r30, 0x7A	; 122
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	80 64       	ori	r24, 0x40	; 64
 2aa:	80 83       	st	Z, r24
 2ac:	0e c0       	rjmp	.+28     	; 0x2ca <__vector_29+0x56>
	}
	else							//else if channel 1 is selected
	{
		desired_steering_in = ADCH;		//store result in desired_steering												FIXME: change to Jetson Nano, remove ADC multiplexer
 2ae:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 2b2:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <desired_steering_in>
		ADMUX &= 0b11111110;			//select channel 0																(desired_steering is temporarily controlled by ADC1, PORT and DDR are unchanged)
 2b6:	ec e7       	ldi	r30, 0x7C	; 124
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	80 81       	ld	r24, Z
 2bc:	8e 7f       	andi	r24, 0xFE	; 254
 2be:	80 83       	st	Z, r24
		ADCSRA |= 0b01000000;			//start conversion
 2c0:	ea e7       	ldi	r30, 0x7A	; 122
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	80 64       	ori	r24, 0x40	; 64
 2c8:	80 83       	st	Z, r24
	}
}
 2ca:	ff 91       	pop	r31
 2cc:	ef 91       	pop	r30
 2ce:	8f 91       	pop	r24
 2d0:	0f 90       	pop	r0
 2d2:	0b be       	out	0x3b, r0	; 59
 2d4:	0f 90       	pop	r0
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	0f 90       	pop	r0
 2da:	1f 90       	pop	r1
 2dc:	18 95       	reti

000002de <__vector_31>:

//timer 3 input capture ISR (runs when ICF3 in TIFR3 is set)
ISR (TIMER3_CAPT_vect)
{
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
 2e8:	8f 93       	push	r24
 2ea:	9f 93       	push	r25
	drive_sensor_in = ICR3;
 2ec:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
 2f0:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 2f4:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <drive_sensor_in+0x1>
 2f8:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <drive_sensor_in>
	TCNT3 = 0;
 2fc:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 300:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
}
 304:	9f 91       	pop	r25
 306:	8f 91       	pop	r24
 308:	0f 90       	pop	r0
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	0f 90       	pop	r0
 30e:	1f 90       	pop	r1
 310:	18 95       	reti

00000312 <__divmodsi4>:
 312:	05 2e       	mov	r0, r21
 314:	97 fb       	bst	r25, 7
 316:	16 f4       	brtc	.+4      	; 0x31c <__divmodsi4+0xa>
 318:	00 94       	com	r0
 31a:	0f d0       	rcall	.+30     	; 0x33a <__negsi2>
 31c:	57 fd       	sbrc	r21, 7
 31e:	05 d0       	rcall	.+10     	; 0x32a <__divmodsi4_neg2>
 320:	14 d0       	rcall	.+40     	; 0x34a <__udivmodsi4>
 322:	07 fc       	sbrc	r0, 7
 324:	02 d0       	rcall	.+4      	; 0x32a <__divmodsi4_neg2>
 326:	46 f4       	brtc	.+16     	; 0x338 <__divmodsi4_exit>
 328:	08 c0       	rjmp	.+16     	; 0x33a <__negsi2>

0000032a <__divmodsi4_neg2>:
 32a:	50 95       	com	r21
 32c:	40 95       	com	r20
 32e:	30 95       	com	r19
 330:	21 95       	neg	r18
 332:	3f 4f       	sbci	r19, 0xFF	; 255
 334:	4f 4f       	sbci	r20, 0xFF	; 255
 336:	5f 4f       	sbci	r21, 0xFF	; 255

00000338 <__divmodsi4_exit>:
 338:	08 95       	ret

0000033a <__negsi2>:
 33a:	90 95       	com	r25
 33c:	80 95       	com	r24
 33e:	70 95       	com	r23
 340:	61 95       	neg	r22
 342:	7f 4f       	sbci	r23, 0xFF	; 255
 344:	8f 4f       	sbci	r24, 0xFF	; 255
 346:	9f 4f       	sbci	r25, 0xFF	; 255
 348:	08 95       	ret

0000034a <__udivmodsi4>:
 34a:	a1 e2       	ldi	r26, 0x21	; 33
 34c:	1a 2e       	mov	r1, r26
 34e:	aa 1b       	sub	r26, r26
 350:	bb 1b       	sub	r27, r27
 352:	fd 01       	movw	r30, r26
 354:	0d c0       	rjmp	.+26     	; 0x370 <__udivmodsi4_ep>

00000356 <__udivmodsi4_loop>:
 356:	aa 1f       	adc	r26, r26
 358:	bb 1f       	adc	r27, r27
 35a:	ee 1f       	adc	r30, r30
 35c:	ff 1f       	adc	r31, r31
 35e:	a2 17       	cp	r26, r18
 360:	b3 07       	cpc	r27, r19
 362:	e4 07       	cpc	r30, r20
 364:	f5 07       	cpc	r31, r21
 366:	20 f0       	brcs	.+8      	; 0x370 <__udivmodsi4_ep>
 368:	a2 1b       	sub	r26, r18
 36a:	b3 0b       	sbc	r27, r19
 36c:	e4 0b       	sbc	r30, r20
 36e:	f5 0b       	sbc	r31, r21

00000370 <__udivmodsi4_ep>:
 370:	66 1f       	adc	r22, r22
 372:	77 1f       	adc	r23, r23
 374:	88 1f       	adc	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	1a 94       	dec	r1
 37a:	69 f7       	brne	.-38     	; 0x356 <__udivmodsi4_loop>
 37c:	60 95       	com	r22
 37e:	70 95       	com	r23
 380:	80 95       	com	r24
 382:	90 95       	com	r25
 384:	9b 01       	movw	r18, r22
 386:	ac 01       	movw	r20, r24
 388:	bd 01       	movw	r22, r26
 38a:	cf 01       	movw	r24, r30
 38c:	08 95       	ret

0000038e <_exit>:
 38e:	f8 94       	cli

00000390 <__stop_program>:
 390:	ff cf       	rjmp	.-2      	; 0x390 <__stop_program>
